percent_pos <- round(clean$New.Percent.Positive[nrow(clean)]*100, digits = 1)
percent_pos7 <- round(clean$Week.Positivity.Rate[nrow(clean)-4]*100, digits = 1)
percent_hospital <- round(clean$Percent.Hospitalized[nrow(clean)], digits = 1)
# percent_hospital <- clean$Percent.Hospitalized[nrow(clean)]
ICU <- today$ICU
percent_ICU <- round(today$ICU/today$hospitalized*100, digits = 1)
sick <- format(today$Still.Sick, scientific = FALSE, big.mark=",")
IowaPop <- 3155070
clean = clean %>% mutate(
Individuals.Reported = Individuals.Tested - lag(Individuals.Tested),
Individuals.Positive = Individuals.Postive - lag(Individuals.Postive),
Bremer.Rep = Bremer.Individuals.Tested - lag(Bremer.Individuals.Postive))
write.csv(clean, "clean.csv")
# Adding more data to Bremer
hosp <- as.integer(hospital[,"Bremer"])
temp <- clean %>% select("date","Bremer.Positive",
"Bremer.Recovered", "Bremer.Death")
names(temp) = c("date","Positive", "Recovered", "Deaths")
temp <- subset(temp,
!is.na(Positive) & date < "2020-07-31")%>%
mutate(Tested = NA, Hospitalized = NA)
temp2 <- BremerData %>% select("date","Hospitalized", "Tested","Positive", "Recovered", "Deaths")
temp = rbind(temp, temp2)
rm(temp2)
temp$Tested = as.integer(temp$Tested)
temp <- temp  %>%
mutate(
Active = Positive - Recovered - Deaths,
New.Pos = Positive - lag(Positive),
New.Test = Tested - lag(Tested),
New.Rec = Recovered - lag(Recovered),
New.Deaths = Deaths - lag(Deaths),
Frac.Pos = New.Pos/New.Test,
Day7.Test = Tested - lag(Tested, n=7),
Day7.Pos = Positive - lag(Positive, n=7),
Day7.Rec = Recovered - lag(Recovered, n=7),
Day7.Death = Deaths - lag(Deaths, n=7),
Day7.Active = Active - lag(Active, n=7),
Day7.Perc = Day7.Pos/Day7.Test,
Day14.Test = Tested - lag(Tested, n=14),
Day14.Pos = Positive - lag(Positive, n=14),
Day14.Rec = Recovered - lag(Recovered, n=14),
Day14.Death = Deaths - lag(Deaths, n=14),
Day14.Active = Active - lag(Active, n=14),
Day14.Perc = Day14.Pos/Day14.Test,
Not.Sick = (lag(Positive, n= 10) -
lag(Positive, n=28))*0.7,
True.Active = Positive - Recovered -
Deaths - round(Not.Sick, digits = 0)
)
BremerData = temp
rm(temp)
write.csv(BremerData, "CountyData/BremerData.csv")
maxtoday = data.frame(colMax(clean[,-1]) == today[,-1])
temp = subset(clean, date == (as.Date(day)-365))
oldactive = temp$positive-temp$Recovered-temp$deaths
rm(temp)
week.new.pos = round(new_pos/7, digits = 1)
require(knitr)
day <- Sys.Date()
colMax <- function(data) sapply(data, max, na.rm = TRUE)
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Black Hawk",][,3]
Linn_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Linn",][,3]
Johnson_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Johnson",][,3]
Bremerlastrow <- BremerData[nrow(BremerData),]
Black.Hawklastrow <- Black.HawkData[nrow(Black.HawkData),]
Butlerlastrow <- ButlerData[nrow(ButlerData),]
# AC = as.integer(lastrow["Active"])
# H = as.integer(lastrow["Hospitalized"])
# NP = as.integer(lastrow["New.Pos"])
# PR = as.numeric(round(lastrow["Frac.Pos"]*100, digits = 2))
# ND = as.integer(lastrow["New.Deaths"])
# T = as.integer(lastrow["New.Test"])
Brtemp = data.frame(colMax(BremerData) == Bremerlastrow)
BHtemp = data.frame(colMax(Black.HawkData) == Black.Hawklastrow)
Butemp = data.frame(colMax(ButlerData) == Butlerlastrow)
todaytemp = data.frame(colMax(clean[,-1]) == today[,-1])
###########Risk Calculation#####################
groupsize = 15
Risk <- Risk %>% mutate(Bremer.Prob = Bremerlastrow$Active/Bremer_Population
, 'Black.Hawk.Prob' = Black.Hawklastrow$Active/BlackHawk_Population,
'Butler.Prob' = Butlerlastrow$Active/Butler_Population,
'WSR.Prob' = (Butlerlastrow$Active+ Bremerlastrow$Active)/(Butler_Population+ Bremer_Population),
'Linn.Prob' = LinnData[nrow(LinnData),]$Active/Linn_Population,
'Johnson.Prob' = JohnsonData[nrow(JohnsonData),]$Active/Johnson_Population)
Risk = Risk %>% mutate(
Bremer.Risk = 1-(1-Bremer.Prob*5)^groupsize,
Black.Hawk.Risk = 1-(1-Black.Hawk.Prob*5)^groupsize,
Butler.Risk = 1-(1-Butler.Prob*5)^groupsize,
WSR.Risk = 1-(1-WSR.Prob*5)^groupsize,
Johnson.Risk = 1-(1-Johnson.Prob*5)^groupsize,
Linn.Risk = 1-(1-Linn.Prob*5)^groupsize
)
require(reshape2)
mydate <- Sys.Date()
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[
county$STATE=="Iowa"&county$COUNTY=="Black Hawk",
][,3]
year_reference = subset(BremerData, date == (day-365))$Active/Bremer_Population*10^5
temp = clean[,c("date","Bremer.SS", "Butler.SS", "BlackHawk.SS")]
temp = temp %>% mutate(Bremer = Bremer.SS/Bremer_Population*100000,
Butler = Butler.SS/Butler_Population* 100000,
BlackHawk = BlackHawk.SS/BlackHawk_Population * 100000)
View(BremerData)
Bremer_Population
Bremer.SS/Bremer_Population*100000
temp = clean[,c("date","Bremer.SS", "Butler.SS", "BlackHawk.SS")]
temp = temp %>% mutate(Bremer = Bremer.SS/Bremer_Population*100000,
Butler = Butler.SS/Butler_Population* 100000,
BlackHawk = BlackHawk.SS/BlackHawk_Population * 100000)
temp$Bremer.SS/Bremer_Population*100000
temp$Bremer.SS
Bremer_Population*100000
Bremer_Population[1]*100000
Bremer_Population
Bremer_Population[]
Bremer_Population[1,1]
as.numeric(Bremer_Population)
as.numeric(Bremer_Population)*10000
Bremer_Population
Bremer_Population$Population
temp = temp %>% mutate(Bremer = Bremer.SS/Bremer_Population$Population*100000,
Butler = Butler.SS/Butler_Population$Population* 100000,
BlackHawk = BlackHawk.SS/BlackHawk_Population$Population * 100000)
temp = tail(temp, n=90)
mtemp = melt(temp, id.vars = "date",
measure.vars = c('Bremer', 'Butler', 'BlackHawk'))
printplot <- qplot(as.Date(date), value, color = variable, data = mtemp, geom = c("point", "smooth")) +
ylab("Cases per 100,000") +
labs(color = "County", title = paste("Active Cases Per 100,000", mydate))
print(printplot)
print(printplot)
ggsave(paste(day,"BBBCounties.png"), plot = printplot)
ggsave(paste(day,"BBBCounties.png"), plot = printplot)
# ggsave("BBBCounties.png")
#
png(paste(day,"BBBCounties.png"))
print(printplot)
print(printplot)
dev.off()
mydate <- Sys.Date()
hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
readr::read_lines() %>% str_squish()
# hosp_by_county <-    str_squish(hosp_by_county)
require(dplyr)
require(lubridate)
require(ggplot2)
require(zoo)
require(gsheet)
require(plyr)
require(pdftools)
require(tidyverse)
require(stringr)
require(anytime)
#  require(readxl)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
mydate <- Sys.Date()
hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
readr::read_lines() %>% str_squish()
# hosp_by_county <-    str_squish(hosp_by_county)
temp <- hosp_by_county
hosp_by_county <- temp[5:37]
temp1 = strsplit(temp[41]," ") %>% ldply()
date = as.character(mdy(temp1[3]))
hosp_by_county <-hosp_by_county %>%
strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
hosp_by_county_df <- plyr::ldply(hosp_by_county)
temp1 <- hosp_by_county_df[,1:2]
temp2 <- hosp_by_county_df[,3:4]
temp3 <- hosp_by_county_df[,5:6]
colnames(temp2) <- names(temp1)
colnames(temp3) <- names(temp1)
hosp_by_county <- rbind(temp1, temp2, temp3)
colnames(hosp_by_county) <- c("County", "Hospitalized")
hosp_by_county <-hosp_by_county %>%
mutate(Hospitalized = as.numeric(Hospitalized))
temp1 = sum(hosp_by_county[,2])
hosp_by_county <- rbind(hosp_by_county, c("Totals", temp1))
rm(temp1, temp2, temp3, hosp_by_county_df)
rownames(hosp_by_county) <- hosp_by_county[,1]
hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
hospital <- hospital[,-1]
#hospital[,1] = mdy(hospital[,1])
h_county <-  t(hosp_by_county[,2])
colnames(h_county) <-  hosp_by_county[,1]
h_county <- cbind(date = c(date, h_county))
rownames(h_county) <- colnames(hospital)
h_county <- t(h_county)
if(mydate1== date){
hospital <- rbind(hospital, h_county)
} else {
temp <-hospital[,1]== date
temp1 <- (1:600)[temp][1]
hospital[temp1,] <- h_county
if(as.character(hospital[nrow(hospital),1]) != mydate1){
hospital <- rbind.fill(hospital, data.frame(Date = Sys.Date()))
}
}
mydate <- Sys.Date()
hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
readr::read_lines() %>% str_squish()
# hosp_by_county <-    str_squish(hosp_by_county)
temp <- hosp_by_county
hosp_by_county <- temp[5:37]
temp1 = strsplit(temp[41]," ") %>% ldply()
date = as.character(mdy(temp1[3]))
hosp_by_county <-hosp_by_county %>%
strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
hosp_by_county_df <- plyr::ldply(hosp_by_county)
temp1 <- hosp_by_county_df[,1:2]
temp2 <- hosp_by_county_df[,3:4]
temp3 <- hosp_by_county_df[,5:6]
colnames(temp2) <- names(temp1)
colnames(temp3) <- names(temp1)
hosp_by_county <- rbind(temp1, temp2, temp3)
colnames(hosp_by_county) <- c("County", "Hospitalized")
hosp_by_county <-hosp_by_county %>%
mutate(Hospitalized = as.numeric(Hospitalized))
temp1 = sum(hosp_by_county[,2])
hosp_by_county <- rbind(hosp_by_county, c("Totals", temp1))
rm(temp1, temp2, temp3, hosp_by_county_df)
rownames(hosp_by_county) <- hosp_by_county[,1]
hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
hospital <- hospital[,-1]
#hospital[,1] = mdy(hospital[,1])
h_county <-  t(hosp_by_county[,2])
colnames(h_county) <-  hosp_by_county[,1]
h_county <- cbind(date = c(date, h_county))
rownames(h_county) <- colnames(hospital)
h_county <- t(h_county)
if(mydate1== date){
hospital <- rbind(hospital, h_county)
} else {
temp <-hospital[,1]== date
temp1 <- (1:600)[temp][1]
hospital[temp1,] <- h_county
if(as.character(hospital[nrow(hospital),1]) != mydate1){
hospital <- rbind.fill(hospital, data.frame(Date = Sys.Date()))
}
}
# if(mydate1== date){
#     hospital <- rbind(hospital, h_county)
# } else {
#   temp <-hospital[,1]== date
#   temp1 <- (1:600)[temp][1]
#   hospital[temp1,] <- h_county
#   if(as.character(hospital[nrow(hospital),1]) != mydate1){
hospital <- rbind.fill(hospital, data.frame(Date = Sys.Date()))
View(hospital)
hospital = hospital[-357:358,]
hospital = hospital[-(357:358),]
mydate <- Sys.Date()
hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
readr::read_lines() %>% str_squish()
# hosp_by_county <-    str_squish(hosp_by_county)
temp <- hosp_by_county
hosp_by_county <- temp[5:37]
temp1 = strsplit(temp[41]," ") %>% ldply()
date = as.character(mdy(temp1[3]))
hosp_by_county <-hosp_by_county %>%
strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
hosp_by_county_df <- plyr::ldply(hosp_by_county)
temp1 <- hosp_by_county_df[,1:2]
temp2 <- hosp_by_county_df[,3:4]
temp3 <- hosp_by_county_df[,5:6]
colnames(temp2) <- names(temp1)
colnames(temp3) <- names(temp1)
hosp_by_county <- rbind(temp1, temp2, temp3)
colnames(hosp_by_county) <- c("County", "Hospitalized")
hosp_by_county <-hosp_by_county %>%
mutate(Hospitalized = as.numeric(Hospitalized))
temp1 = sum(hosp_by_county[,2])
hosp_by_county <- rbind(hosp_by_county, c("Totals", temp1))
rm(temp1, temp2, temp3, hosp_by_county_df)
rownames(hosp_by_county) <- hosp_by_county[,1]
hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
hospital <- hospital[,-1]
#hospital[,1] = mdy(hospital[,1])
h_county <-  t(hosp_by_county[,2])
colnames(h_county) <-  hosp_by_county[,1]
h_county <- cbind(date = c(date, h_county))
rownames(h_county) <- colnames(hospital)
h_county <- t(h_county)
# if(mydate1== date){
#     hospital <- rbind(hospital, h_county)
# } else {
#   temp <-hospital[,1]== date
#   temp1 <- (1:600)[temp][1]
#   hospital[temp1,] <- h_county
#   if(as.character(hospital[nrow(hospital),1]) != mydate1){
hospital <- rbind.fill(hospital, data.frame(Date = date)
)
date
hospital = hospital[-(357:358),]
# if(mydate1== date){
hospital <- rbind(hospital, h_county)
# } else {
#   temp <-hospital[,1]== date
#   temp1 <- (1:600)[temp][1]
#   hospital[temp1,] <- h_county
#   if(as.character(hospital[nrow(hospital),1]) != mydate1){
# hospital <- rbind.fill(hospital, data.frame(Date = date))
#   }
# }
hospital <- unique(hospital)
write.csv(hospital, "CountyHospitilizations.csv")
hospital <- hospital[!is.na(hospital$Adair),]
## Change Date on pdf file
Summary <- pdf_text(
"access _ Iowa COVID-19 Information22.pdf") %>%
readr::read_lines() %>% str_squish()
Summary = Summary[!Summary == ""]
temp1 = Summary[6] %>% ldply()
Summary <- str_remove_all(Summary, " Translate") %>%
str_remove_all("Translate")
CountyDataOld <- Summary[43:146] %>%
strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
CountyDataOld <- CountyDataOld[-c(10:11,71:72)]
CountyDataOld <- plyr::ldply(CountyDataOld)
temp <- strsplit(CountyDataOld[,2], " ", fixed = TRUE)
temp <- plyr::ldply(temp)
temp[,1] = CountyDataOld[,1]
colnames(temp) = c("County", "Individuals.Tested","Individuals.Positive",
"Total.Recovered", "Total.Deaths")
CountyDataOld <- temp
CountyDataOld[-1] = sapply(CountyDataOld[-1], as.integer)
CountyDataOld <- as.data.frame(CountyDataOld) %>%
arrange(County)%>%
mutate(Active = Individuals.Positive - Total.Recovered - Total.Deaths,
positivity = Individuals.Positive/Individuals.Tested,
date = as.Date(mydate),
)
temp <-c(County = "Totals",
colSums(CountyDataOld[,2:6]),
positivity = NA,
date = as.character(date))
temp["positivity"] = as.integer(temp["Individuals.Positive"])/as.integer(temp["Individuals.Tested"])
CountyDataOld[101,] = temp
CountyDataOld[,2:6] = sapply(CountyDataOld[,2:6], as.integer)
CountyDataOld[,7] = sapply(CountyDataOld[,7], as.numeric)
#More interesting information
tempnames =Summary[seq(7,21, 2)]
tempnames1 = Summary[seq(26,40,2)]
tempnames = c(tempnames, tempnames1)
tempdata =Summary[seq(8,20, 2)]
tempdata1 =Summary[seq(25,41, 2)]
tempdata = c(tempdata, tempdata1)
tempdata = plyr::ldply(as.integer(
gsub(",","",tempdata)))
tempdata = t(tempdata)
colnames(tempdata) <- tempnames
tempdata = cbind("date"=date, tempdata)
statedata <- read.csv(paste(
'CountyData/StateData.csv'),
stringsAsFactors = FALSE)
# statedata = rbind(statedata, tempdata)
if (statedata$date[nrow(statedata)] != tempdata[1]){
statedata[nrow(statedata)+1,]=tempdata
}
statedata[,-1] = sapply(statedata[,-1], as.integer)
##Add data to big csv files
d_county <- t(CountyDataOld)
county_names <- d_county[1,]
colnames(d_county) <- d_county[1,]
d_county = d_county[-1,]
# colnames(d_county)[1] <- "date"
d_county[1:5,] = sapply(d_county[1:5,], as.integer)
# d_county[9,] = sapply(d_county[9,], as.numeric)
# d_county <- as.data.frame(d_county)%>%
#     mutate(Total = Reduce(`+`, .))
d_county <- cbind(date=as.character(date),d_county)
Tested <- read.csv( "CountyData/CountyTests.csv", stringsAsFactors=FALSE)
Tested <- Tested[,-1]
Positive <- read.csv( "CountyData/CountyPositive.csv", stringsAsFactors=FALSE)
Positive <- Positive[,-1]
Recovered <- read.csv( "CountyData/CountyRecovered.csv", stringsAsFactors=FALSE)
Recovered <- Recovered[,-1]
Deaths <- read.csv( "CountyData/CountyDeaths.csv", stringsAsFactors=FALSE)
Deaths <- Deaths[,-1]
Active <- read.csv( "CountyData/CountyActive.csv", stringsAsFactors=FALSE)
Active <- Active[,-1]
templist = c("Tested", "Positive", "Recovered", "Deaths", "Active" )
if(anydate(Tested[nrow(Tested), 1]) != date){
Tested <- rbind(Tested, d_county["Individuals.Tested",])
Positive <- rbind(Positive, d_county["Individuals.Positive",])
Recovered <- rbind(Recovered, d_county["Total.Recovered",])
Deaths <- rbind(Deaths, d_county["Total.Deaths",])
Active <- rbind(Active, d_county["Active",])
}
Tested[,-1] = sapply(Tested[,-1], as.integer)
Positive[,-1] = sapply(Positive[,-1], as.integer)
Recovered[,-1] = sapply(Recovered[,-1], as.integer)
Deaths[,-1] = sapply(Deaths[,-1], as.integer)
Active[,-1] = sapply(Active[,-1], as.integer)
trows <- nrow(Tested)
newTest <- Tested[trows,-1]-Tested[trows-1,-1]
newRec <- Recovered[trows,-1]-Recovered[trows-1,-1]
newDeath <- Deaths[trows,-1]-Deaths[trows-1,-1]
PerPos7 <- (Positive[trows,-1]-
Positive[trows-7,-1])/
(Tested[trows,-1]-
Tested[trows-7,-1])
county_names <- colnames(Tested)
county_names <- county_names[county_names != "Pending Investigation"]
# county_names <- county_names[-76]
county_names <- gsub(" ", ".", county_names)
county_names <- gsub("'", ".", county_names)
dates <- anydate(Tested[,1]    )
if(!("Pending.Investigation" %in% names(hospital))){
target = which(names(hospital)== "Palo.Alto")
hospital = cbind(hospital[,1:target,drop=F], data.frame("Pending.Investigation"=""), hospital[,(target+1):length(hospital),drop=F])
}
for(i in 2:(length(county_names))){
i = county_names[i]
test <- Tested[,i]
temp = length(test)
pos <- as.numeric(Positive[,i])
rec <- as.numeric(Recovered[,i])
hosp <- as.integer(hospital[,i])
hosp = c(rep(NA, length(test)-length(hosp)),hosp)
death <- as.numeric(Deaths[,i])
temp <- data.frame(
date = dates,
Tested = test,
Positive = pos,
Recovered = rec,
Hospitalized = hosp,
Deaths = death)
temp <- temp %>%
mutate(
Active = Positive - Recovered - Deaths,
New.Pos = Positive - lag(Positive),
New.Test = Tested - lag(Tested),
New.Rec = Recovered - lag(Recovered),
New.Deaths = Deaths - lag(Deaths),
Frac.Pos = New.Pos/New.Test,
Day7.Test = Tested - lag(Tested, n=7),
Day7.Pos = Positive - lag(Positive, n=7),
Day7.Rec = Recovered - lag(Recovered, n=7),
Day7.Death = Deaths - lag(Deaths, n=7),
Day7.Active = Active - lag(Active, n=7),
Day7.Perc = Day7.Pos/Day7.Test,
Day14.Test = Tested - lag(Tested, n=14),
Day14.Pos = Positive - lag(Positive, n=14),
Day14.Rec = Recovered - lag(Recovered, n=14),
Day14.Death = Deaths - lag(Deaths, n=14),
Day14.Active = Active - lag(Active, n=14),
Day14.Perc = Day14.Pos/Day14.Test,
Not.Sick = (lag(Positive, n= 10) -
lag(Positive, n=28))*0.7,
True.Active = Positive - Recovered -
Deaths - round(Not.Sick, digits = 0)
)
assign(paste(i,"Data", sep=""), temp)
# write.csv(temp, paste("CountyData/",county_names[i],
# "Data.csv", sep=""))
}
tail(Tested[,1:4])
View(BremerData)
require(dplyr)
require(lubridate)
require(ggplot2)
require(zoo)
require(gsheet)
require(plyr)
require(pdftools)
require(tidyverse)
require(stringr)
require(anytime)
#  require(readxl)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
names(covid19)
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
## Fix an error that sometimes comes from importing from EXCEL
names(covid19)[names(covid19) == "ï..date"] <- 'date'
## Format date column correctly
covid19$date = anydate(covid19$date)
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
## Format date column correctly
covid19$date = anydate(covid19$date)
str(covid19$ï..date)
rename(covid19, date = ï..date)
rename(covid19, 'date' = 'ï..date')
covid19 %>% rename(date = ï..date)
names(covid19)[1] <- "date"
# names(covid19)[names(covid19) == "ï..date"] <- 'date'
## Format date column correctly
covid19$date = anydate(covid19$date)
temp = covid19 %>% select(date, Positive.Tests)
temp = temp[!is.na(temp$Positive.Tests)]
temp = temp[!is.na(temp$Positive.Tests),]
temp = temp %>% mutate(New.Positive = (Positive.Tests - lag(Positive.Tests))/(date - lag(date)))
temp = temp %>% mutate(New.Positive = (Positive.Tests - lag(Positive.Tests))/(as.numeric(date) - as.numeric(lag(date)))
)
View(temp)
temp$New.Positive[513]=temp$New.Positive[513]/2
temp$New.Positive[228]=temp$New.Positive[228]/2
temp$New.Positive[231]=temp$New.Positive[231]/2
View(clean)
(clean$deaths[515]- clean$deaths[509])/IowaPop
(clean$deaths[515]- clean$deaths[509])
(clean$deaths[515])
(clean$deaths)
(clean$death[nrow(clean)]-clean$death[nrow(clean)-2]
)
(clean$death[nrow(clean)]-clean$death[nrow(clean)-2])/IowaPop*100000
