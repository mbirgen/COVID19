data = tail(clean, n=180),
#                 geom = c("point", "smooth")
) +
ggtitle("Known Active COVID-19 Cases in Bremer County") +
geom_smooth(span = 0.3, se = TRUE)
#    "Known Active COVID-19 Cases in Bremer County")
#+  geom_hline(aes(yintercept=State_Average_Active)
pButler <-qplot(date,
#Butler.SS/Butler_Population*100000,
Butler.SS,
data = tail(clean, n=120), geom = "point") +
ggtitle("Known Active COVID-19 Cases in Butler County") + geom_smooth(span = 0.3, se = TRUE)
ggtitle("Known Active COVID-19 Cases in Butler County Per 100,000 People")
#+  geom_hline(aes(yintercept=State_Average_Active)
png(paste(day,"pButler.png"))
pButler
dev.off()
pButler
pBlackHawk <-qplot(date,
#Butler.SS/Butler_Population*100000,
BlackHawk.SS,
data = tail(clean, n=120), geom = "point") +
geom_smooth(span = 0.3, se = TRUE) +
ggtitle("Known Active COVID-19 Cases in Black Hawk County")
png(paste(day,"pBlackHawk.png"))
pBlackHawk
dev.off()
pBlackHawk
png(paste(day,"pBremer.png"))
pBremer
dev.off()
pBremer
day7pos.Bremer <- round(
BremerData[nrow(BremerData), ncol(BremerData)]*100, digits=1)
# mydate <- Sys.Date()
# hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
#     readr::read_lines() %>% str_squish()
# # hosp_by_county <-    str_squish(hosp_by_county)
# temp <- hosp_by_county
# hosp_by_county <- temp[5:37]
# temp1 = strsplit(temp[41]," ") %>% ldply()
# date = as.character(mdy(temp1[3]))
#
# hosp_by_county <-hosp_by_county %>%
#     strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
#
# hosp_by_county_df <- plyr::ldply(hosp_by_county)
# temp1 <- hosp_by_county_df[,1:2]
# temp2 <- hosp_by_county_df[,3:4]
# temp3 <- hosp_by_county_df[,5:6]
# colnames(temp2) <- names(temp1)
# colnames(temp3) <- names(temp1)
# hosp_by_county <- rbind(temp1, temp2, temp3)
# colnames(hosp_by_county) <- c("County", "Hospitalized")
# hosp_by_county <-hosp_by_county %>%
#     mutate(Hospitalized = as.numeric(Hospitalized))
# temp1 = sum(hosp_by_county[,2])
# hosp_by_county <- rbind(hosp_by_county, c("Totals", temp1))
# rm(temp1, temp2, temp3, hosp_by_county_df)
#
# rownames(hosp_by_county) <- hosp_by_county[,1]
#
# hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
# hospital <- hospital[,-1]
# #hospital[,1] = mdy(hospital[,1])
# h_county <-  t(hosp_by_county[,2])
#
# colnames(h_county) <-  hosp_by_county[,1]
# h_county <- cbind(date = c(date, h_county))
# rownames(h_county) <- colnames(hospital)
# h_county <- t(h_county)
# # if(mydate1== date){
#     hospital <- rbind(hospital, h_county)
# # } else {
# #   temp <-hospital[,1]== date
# #   temp1 <- (1:600)[temp][1]
# #   hospital[temp1,] <- h_county
# #   if(as.character(hospital[nrow(hospital),1]) != mydate1){
#   # hospital <- rbind.fill(hospital, data.frame(Date = date))
# #   }
# # }
# hospital <- unique(hospital)
#
# write.csv(hospital, "CountyHospitilizations.csv")
# hospital <- hospital[!is.na(hospital$Adair),]
# ## Change Date on pdf file
# Summary <- pdf_text(
#     "access _ Iowa COVID-19 Information08.pdf") %>%
#     readr::read_lines() %>% str_squish()
# Summary = Summary[!Summary == ""]
# temp1 = Summary[6] %>% ldply()
# date = as.character(mdy(temp1[1]))
# # Summary[79] = paste(Summary[79], Summary[80])
# Summary <- str_remove_all(Summary, " Translate") %>%
#     str_remove_all("Translate")
# # Summary[79] = paste(Summary[79], Summary[80])
# CountyDataOld <- Summary[46:150]
# CountyDataOld <- CountyDataOld %>%
# strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
#
#
# # CountyDataOld <- Summary[46:151] %>%
# #     strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
# # CountyDataOld <- CountyDataOld[-c(10:11,71:72)]
# # temp1 = CountyDataOld[44:45]
# # temp2 = plyr::ldply(temp1[1])
# # temp2[,2]=paste0(temp2[,2],plyr::ldply(temp1[2]) )
# # CountyDataOld <- CountyDataOld[-c(35:37,89,91:92)]
# CountyDataOld <- CountyDataOld[-c(35:36,88, 90:91)]
# CountyDataOld1 <- plyr::ldply(CountyDataOld[-100])
# CountyDataOld1[100,] = CountyDataOld[[100]]
# # ]CountyDataOld = rbind(CountyDataOld,temp2)
# temp <- strsplit(CountyDataOld1[,2], " ", fixed = TRUE)
# temp <- plyr::ldply(temp)
# temp[,1] = CountyDataOld1[,1]
# colnames(temp) = c("County", "Individuals.Tested","Individuals.Positive",
#                    "Total.Recovered", "Total.Deaths")
# CountyDataOld <- temp
# CountyDataOld[-1] = sapply(CountyDataOld[-1], as.integer)
# CountyDataOld <- as.data.frame(CountyDataOld) %>%
#     arrange(County)%>%
#     mutate(Active = Individuals.Positive - Total.Recovered - Total.Deaths,
#            positivity = Individuals.Positive/Individuals.Tested,
#            date = as.Date(date),
#     )
#
# temp <-c(County = "Totals",
#          colSums(CountyDataOld[,2:6]),
#          positivity = NA,
#          date = as.character(date))
# temp["positivity"] = as.integer(temp["Individuals.Positive"])/as.integer(temp["Individuals.Tested"])
# CountyDataOld[101,] = temp
# CountyDataOld[,2:6] = sapply(CountyDataOld[,2:6], as.integer)
# CountyDataOld[,7] = sapply(CountyDataOld[,7], as.numeric)
# # CountyDataOld = CountyDataOld[-100,]
# write.csv(CountyDataOld, file = paste(
#     'CountyData/',date,'CountyData.csv'))
#
# #More interesting information
# # tempnames =Summary[seq(7,21, 2)]
# # tempnames1 = Summary[seq(26,40,2)]
# # tempnames = c(tempnames, tempnames1)
# # tempdata =Summary[seq(8,20, 2)]
# # tempdata1 =Summary[seq(25,41, 2)]
# tempnames =Summary[seq(7,17, 2)]
# tempnames1 = Summary[seq(22,36,2)]
# # tempnames2 = Summary[seq(40,42,2)]
# tempnames2 = Summary[seq(41,43,2)]
# tempnames = c(tempnames, tempnames1, tempnames2)
# tempdata =Summary[seq(8,16, 2)]
#
# tempdata1 =Summary[seq(21,35, 2)]
# tempdata2 =Summary[seq(40,44, 2)]
# tempdata = c(tempdata, tempdata1, tempdata2)
# tempdata = plyr::ldply(as.integer(
#   gsub(",","",tempdata)))
# tempdata = t(tempdata)
# colnames(tempdata) <- tempnames
# tempdata = cbind("date"=date, tempdata)
# statedata <- read.csv(paste(
#   'CountyData/StateData.csv'),
#                    stringsAsFactors = FALSE)
# # statedata = rbind(statedata, tempdata)
# if (statedata$date[nrow(statedata)] != tempdata[1]){
# statedata[nrow(statedata)+1,]=tempdata
# }
# statedata[,-1] = sapply(statedata[,-1], as.integer)
# statedata = unique(statedata)
# write.csv(statedata, file = paste(
#     'CountyData/StateData.csv'),
#     row.names = FALSE)
require(knitr)
day <- Sys.Date()
colMax <- function(data) sapply(data, max, na.rm = TRUE)
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Black Hawk",][,3]
Linn_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Linn",][,3]
Johnson_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Johnson",][,3]
Bremerlastrow <- BremerData[nrow(BremerData),]
Black.Hawklastrow <- Black.HawkData[nrow(Black.HawkData),]
Butlerlastrow <- ButlerData[nrow(ButlerData),]
# AC = as.integer(lastrow["Active"])
# H = as.integer(lastrow["Hospitalized"])
# NP = as.integer(lastrow["New.Pos"])
# PR = as.numeric(round(lastrow["Frac.Pos"]*100, digits = 2))
# ND = as.integer(lastrow["New.Deaths"])
# T = as.integer(lastrow["New.Test"])
Brtemp = data.frame(colMax(BremerData) == Bremerlastrow)
BHtemp = data.frame(colMax(Black.HawkData) == Black.Hawklastrow)
Butemp = data.frame(colMax(ButlerData) == Butlerlastrow)
todaytemp = data.frame(colMax(covid19[,-1]) == today[,-1])
################### Find Data Closest to date #########
closestdate <- function(DT, D){
which(abs(DT$date-(date-D)) ==
min(abs(DT$date-date+D)))
}
Bremeroneyearago = closestdate(BremerData, 365)
Bremertwoyearago = closestdate(BremerData, 730)
Butleroneyearago = closestdate(ButlerData, 365)
Butlertwoyearago = closestdate(ButlerData, 730)
BHoneyearago = closestdate(Black.HawkData, 365)
BHtwoyearago = closestdate(Black.HawkData, 730)
###########Risk Calculation#####################
groupsize = 30
# Risk <- data.frame(Date = date)
Risk <- data.frame(Date = date,Bremer.Prob = Bremerlastrow$Active/Bremer_Population
, Black.Hawk.Prob = Black.Hawklastrow$Active/BlackHawk_Population,
Butler.Prob = Butlerlastrow$Active/Butler_Population,
WSR.Prob = (Butlerlastrow$Active+ Bremerlastrow$Active)/(Butler_Population+ Bremer_Population),
Linn.Prob = LinnData[nrow(LinnData),]$Active/Linn_Population,
Johnson.Prob = JohnsonData[nrow(JohnsonData),]$Active/Johnson_Population)
names(Risk) = c("Date", "Bremer.Prob", "Black.Hawk.Prob", "Butler.Prob","WSR.Prob", "Linn.Prob", "Johnson.Prob")
Risk = Risk %>% mutate(
Bremer.Risk = 1-(1-Bremer.Prob*5)^groupsize,
Black.Hawk.Risk = 1-(1-Black.Hawk.Prob*5)^groupsize,
Butler.Risk = 1-(1-Butler.Prob*5)^groupsize,
WSR.Risk = 1-(1-WSR.Prob*5)^groupsize,
Johnson.Risk = 1-(1-Johnson.Prob*5)^groupsize,
Linn.Risk = 1-(1-Linn.Prob*5)^groupsize
)
#  Two years ago, we had `r subset(BremerData, date == (day-730))$Active` active cases and  `r subset(BremerData, date == (day-730))$New.Pos` new positive patients in Bremer County.
require(reshape2)
mydate <- Sys.Date()
graphlength = 90
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[
county$STATE=="Iowa"&county$COUNTY=="Black Hawk",
][,3]
year_reference = subset(BremerData, date == (day-365))$Active/Bremer_Population*10^5
temp = covid19[,c("date","Bremer.SS", "Butler.SS", "BlackHawk.SS")]
temp = temp %>% mutate(Bremer = Bremer.SS/Bremer_Population$Population*100000,
Butler = Butler.SS/Butler_Population$Population* 100000,
BlackHawk = BlackHawk.SS/BlackHawk_Population$Population * 100000)
# temp = tail(temp, n=graphlength)
temp = temp[temp$date >= (mydate-graphlength),]
mtemp = melt(temp, id.vars = "date",
measure.vars = c('Bremer', 'Butler', 'BlackHawk'))
printplot <- qplot(as.Date(date), value, color = variable, data = mtemp, geom = "point") +
geom_smooth(span = 0.5, se = TRUE) +
ylab("Cases per 100,000") +
xlab("Date")+
labs(color = "County", title = paste("Active Cases Per 100,000", mydate))
# +geom_hline(yintercept = year_reference,
#            color = "red") +
# geom_text(
#   aes(x= temp$date[1]+20, y= year_reference,
#       label = day-365, vjust = -0.5),
#   colour = "black")
print(printplot)
ggsave(paste(day,"BBBCounties.png"), plot = printplot)
# ggsave("BBBCounties.png")
#
# png(paste(day,"BBBCounties.png"))
# print(printplot)
# dev.off()
# colnames(BremerData) = CountyDataLongNames
lastrow <- BremerData[nrow(BremerData),]
kable(t(lastrow[-1]), digits = 2)
kable(BremerData[,1:7])
require(dplyr)
require(lubridate)
require(ggplot2)
require(zoo)
require(gsheet)
require(plyr)
require(pdftools)
require(tidyverse)
require(stringr)
require(anytime)
#  require(readxl)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
closestdate <- function(DT, D){
which(abs(DT$date-(date-D)) ==
min(abs(DT$date-date+D)))
}
date = Sys.Date()
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
names(covid19)[1] <- "date"
covid19$date = anydate(covid19$date)
oneyearago = closestdate(covid19,365)
twoyearago = closestdate(covid19,730)
# inpatientSave = inpatientSave[-nrow(inpatientSave),]
source("HospitalData.R")
tail(inpatientSave[,c("date","inpatient_beds_used_covid")],7)
sample_table = data.frame(Read = c(66,112), NotRead = c(14,58))
rownames(sample_table) = c("OER", "Publisher")
sample_table
n = 14+66+58+112
n
P_R=(66+112)/n
P_R
P_Rc = (14+58)/n
P_Rc
P_O = (66+14)/n
P_Oc = 0.68
P_R * P_O
P_R * P_Oc
P_Rc * P_O
P_Rc * P_Oc
table = data.frame(Read = c(P_R*P_O, P_R*(1-P_O)), NotRead = c((1-P_R)*P_O, (1-P_R)*(1-P_O)))
rownames(table) = c("OER", "PP")
n*table
sample_table
table
Z_11 = (sample_table[1,1]-table[1,1])/sqrt(table[1,1])
Z_11
Z_12 = (sample_table[1,2]-table[1,2])/sqrt(table[1,2])
Z_12
Z_21 = (sample_table[2,1]-table[2,1])/sqrt(table[2,1])
Z_21
Z_22 = (sample_table[2,2]-table[2,2])/sqrt(table[2,2])
Z_22
chi2 = Z_11^2+Z_12^2+Z_21^2+Z_22^2
chi2
k= 2
ell = 2
degfree = (k-1)*(ell-1)
degfree
pchisq(chi2,degfree, lower.tail = FALSE)
Input =("
MaterialType   DoneReading    NoReading
OER             66              14
Predatory       112             58
")
datamatrix = as.matrix(read.table(textConnection(Input),header=TRUE,row.names=1))
datamatrix
chisq.test(datamatrix, correct=FALSE)
chisq.test(sample_table, correct = FALSE)
Input =("
ProteinType   Beef    Chicken    Pork
Men           65      108        45
Women         84      136        62
")
datamatrix = as.matrix(read.table(textConnection(Input),header=TRUE,row.names=1))
chisq.test(datamatrix, correct=FALSE)
energy = read.csv("https://github.com/TienChih/tbil-stats/raw/main/data/pew_energy_2018.csv")
names(energy)
table(energy$solar_panel_farms, energy$coal_mining)
chisq.test(energy$solar_panel_farms, energy$coal_mining, correct=FALSE)
counts=table(energy$solar_panel_farms, energy$coal_mining)
mosaicplot(counts)
load(url("https://github.com/TienChih/tbil-stats/raw/main/data/movies.Rdata"))
names(movies)
table(movies$genre, movies$critics_rating)
counts=table(movies$genre, movies$critics_rating)
mosaicplot(counts)
chisq.test(movies$genre, movies$critics_rating, correct=FALSE)
summary(movies)
sample_table = data.frame(Read = c(66,112), NotRead = c(14,58))
rownames(sample_table) = c("OER", "Publisher")
sample_table
n = 14+66+58+112
n
P_R=(66+112)/n
P_R
P_Rc =(14+58)/n
P_Rc
P_O = (66+14)/n
P_O
P_Oc=(112/58)/58
P_Oc
P_R*P_O
P_R*P_Rc
table = data.frame(Read = c(P_R*P_O,P_R*(1-P_O)),NotRead = c((1-P_R)*P_O,(1-P_R)*(1-P_O)))
rownames(table) = c("OER", "Publisher")
n*table
sample_table
table
Z_11= (sample_table[1,1]-table[1,1])/sqrt(table[1,1])
Z_11
Z_12 = (sample_table[1,2]-table[1,2])/sqrt(table[1,2])
Z_12
Z_21 = (sample_table[2,1]-table[2,1])/sqrt(table[2,1])
Z_21
Z_22 = (sample_table[2,2]-table[2,2])/sqrt(table[2,2])
Z_22
chi2 = Z_11^2+Z_12^2+Z_21^2+Z_22^2
chi2
k= 2
k
ell = 2
ell
degfree = (k-1)*(ell-1)
degfree
pchisq(chi2,degfree, lower.tail = FALSE)
Input =("
MaterialType   DoneReading    NoReading
OER             66              14
Predatory       112             58
")
datamatrix = as.matrix(read.table(textConnection(Input),header=TRUE,row.names=1))
chisq.test(datamatrix, correct=FALSE)
chisq.test(sample_table, correct = FALSE)
Input =("
ProteinType   Beef    Chicken    Pork
Men           65        108      45
Women         84        136      62
")
datamatrix = as.matrix(read.table(textConnection(Input),header=TRUE,row.names=1))
chisq.test(datamatrix, correct=FALSE)
energy = read.csv("https://github.com/TienChih/tbil-stats/raw/main/data/pew_energy_2018.csv")
names(energy)
table(energy$solar_panel_farms, energy$coal_mining)
chisq.test(energy$solar_panel_farms, energy$coal_mining, correct=FALSE)
counts=table(energy$solar_panel_farms, energy$coal_mining)
mosaicplot(counts)
load(url("https://github.com/TienChih/tbil-stats/raw/main/data/movies.Rdata"))
names(movies)
table(movies$genre, movies$critics_rating)
counts=table(movies$genre, movies$critics_rating)
mosaicplot(counts)
chisq.test(movies$genre, movies$critics_rating, correct=FALSE)
summary(movies)
date = Sys.Date()
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
names(covid19)[1] <- "date"
covid19$date = anydate(covid19$date)
require(dplyr)
require(lubridate)
require(ggplot2)
require(zoo)
require(gsheet)
require(plyr)
require(pdftools)
require(tidyverse)
require(stringr)
require(anytime)
#  require(readxl)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
closestdate <- function(DT, D){
which(abs(DT$date-(date-D)) ==
min(abs(DT$date-date+D)))
}
date = Sys.Date()
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
names(covid19)[1] <- "date"
require(anytime)
covid19$date = anydate(covid19$date)
oneyearago = closestdate(covid19,365)
twoyearago = closestdate(covid19,730)
# inpatientSave = inpatientSave[-nrow(inpatientSave),]
source("HospitalData.R")
tail(inpatientSave[,c("date","inpatient_beds_used_covid")],7)
qplot(date, hospitalized, data = tail(covid19, n=80))+geom_smooth(span = 0.3, se = TRUE)
##############################################
mergedYearonYearHospMeans = covid19 %>%
drop_na(hospitalized) %>%
select("date","hospitalized") %>%
mutate(week = week(date),
year = as.factor(year(date))) %>%
group_by(year, week) %>%
summarise_at(vars(hospitalized), list(WeeklyAve = mean))
qplot(week, WeeklyAve, data=mergedYearonYearHospMeans, color = year) + xlab("Week of Year") + ylab("Weekly Average Hospitalized")+geom_smooth(span = 0.3, se = TRUE)
date = Sys.Date()
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
names(covid19)[1] <- "date"
require(anytime)
covid19$date = anydate(covid19$date)
oneyearago = closestdate(covid19,365)
twoyearago = closestdate(covid19,730)
# inpatientSave = inpatientSave[-nrow(inpatientSave),]
source("HospitalData.R")
tail(inpatientSave[,c("date","inpatient_beds_used_covid")],7)
qplot(date, hospitalized, data = tail(covid19, n=80))+geom_smooth(span = 0.3, se = TRUE)
##############################################
mergedYearonYearHospMeans = covid19 %>%
drop_na(hospitalized) %>%
select("date","hospitalized") %>%
mutate(week = week(date),
year = as.factor(year(date))) %>%
group_by(year, week) %>%
summarise_at(vars(hospitalized), list(WeeklyAve = mean))
qplot(week, WeeklyAve, data=mergedYearonYearHospMeans, color = year) + xlab("Week of Year") + ylab("Weekly Average Hospitalized")+geom_smooth(span = 0.3, se = TRUE)
date = Sys.Date()
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
names(covid19)[1] <- "date"
require(anytime)
covid19$date = anydate(covid19$date)
oneyearago = closestdate(covid19,365)
twoyearago = closestdate(covid19,730)
# inpatientSave = inpatientSave[-nrow(inpatientSave),]
source("HospitalData.R")
tail(inpatientSave[,c("date","inpatient_beds_used_covid")],7)
tail(inpatientSave[,c("date","inpatient_beds_used_covid")],7)
date = Sys.Date()
covid19 <- read.csv("covid19.csv",
stringsAsFactors = FALSE)
names(covid19)[1] <- "date"
require(anytime)
covid19$date = anydate(covid19$date)
oneyearago = closestdate(covid19,365)
twoyearago = closestdate(covid19,730)
# inpatientSave = inpatientSave[-nrow(inpatientSave),]
source("HospitalData.R")
tail(inpatientSave[,c("date","inpatient_beds_used_covid")],7)
qplot(date, hospitalized, data = tail(covid19, n=80))+geom_smooth(span = 0.3, se = TRUE)
##############################################
mergedYearonYearHospMeans = covid19 %>%
drop_na(hospitalized) %>%
select("date","hospitalized") %>%
mutate(week = week(date),
year = as.factor(year(date))) %>%
group_by(year, week) %>%
summarise_at(vars(hospitalized), list(WeeklyAve = mean))
qplot(week, WeeklyAve, data=mergedYearonYearHospMeans, color = year) + xlab("Week of Year") + ylab("Weekly Average Hospitalized")+geom_smooth(span = 0.3, se = TRUE)
