# hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
# hospital <- hospital[,-1]
# h_county <-  t(hosp_by_county[,2])
#
# colnames(h_county) <-  hosp_by_county[,1]
# h_county <- cbind(date = c(as.character(day)), h_county)
# colnames(h_county) <- colnames(hospital)
# # rownames(h_county) <- as.character(day)
# if(as.character(hospital[nrow(hospital),1])!= day){ hospital <- rbind(hospital, h_county)}
#
# write.csv(hospital, "CountyHospitilizations.csv")
write.csv(predictions, "Predictions.csv")
write.csv(clean, "CleanData.csv")
qplot(date, positive, data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
qplot(date, deaths, data =cdeaths, rm.na=TRUE) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(deaths~date, data=cdeaths)
#model$coefficients
model4 <- lm(log(New.Positive) ~ date, data = clean)
pred <- predict(model4, newdata = data.frame(date =clean$date))
np_doubling_time <- log(2)/model4$coefficients[2]
qplot(date, New.Positive, data = clean, geom = c("point", "smooth")) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = exp(pred), col = "model")) +
geom_line(aes(y=np_7day, col = "7 day average"), size = 1.25)
require(knitr)
lastrow <- BremerData[nrow(BremerData),]
AC = as.integer(lastrow["Active"])
H = as.integer(lastrow["Hospitalized"])
NP = as.integer(lastrow["New.Pos"])
PR = as.numeric(round(lastrow["Frac.Pos"]*100, digits = 2))
ND = as.integer(lastrow["New.Deaths"])
T = as.integer(lastrow["New.Test"])
require(reshape2)
mydate <- Sys.Date()
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[
county$STATE=="Iowa"&county$COUNTY=="Black Hawk",
][,3]
temp = clean[,c("date","Bremer.SS", "Butler.SS", "BlackHawk.SS")]
temp = temp %>% mutate(Bremer = Bremer.SS/Bremer_Population*100000,
Butler = Butler.SS/Butler_Population* 100000,
BlackHawk = BlackHawk.SS/BlackHawk_Population * 100000)
temp = temp[-(1:71),]
mtemp = melt(temp, id.vars = "date",
measure.vars = c('Bremer', 'Butler', 'BlackHawk'))
printplot <- qplot(date, value, color = variable, data = mtemp, geom = c("point", "smooth")) +
ylab("Cases per 100,000") +
labs(color = "County", title = paste("Active Cases Per 100,000", mydate))
print(printplot)
png("BBBCounties.png")
printplot
dev.off()
# colnames(BremerData) = CountyDataLongNames
lastrow <- BremerData[nrow(BremerData),]
kable(t(lastrow[-1]), digits = 2)
kable(BremerData[,1:7])
suppressPackageStartupMessages( require(dplyr))
suppressPackageStartupMessages( require(lubridate))
suppressPackageStartupMessages( require(ggplot2))
suppressPackageStartupMessages( require(zoo))
suppressPackageStartupMessages( require(gsheet))
suppressPackageStartupMessages( require(plyr))
suppressPackageStartupMessages( require(pdftools))
suppressPackageStartupMessages( require(tidyverse))
suppressPackageStartupMessages( require(stringr))
# suppressPackageStartupMessages( require(readxl))
mydate1 <- Sys.Date()
hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
readr::read_lines() %>% str_squish()
# hosp_by_county <-    str_squish(hosp_by_county)
temp <- hosp_by_county
hosp_by_county <- temp[5:37]
temp1 = strsplit(temp[40]," ") %>% ldply()
date = as.character(mdy(temp1[3]))
# date = "8/6/20"
# hosp_by_county <- temp[46:78]
# date = "8/7/20"
# hosp_by_county <- temp[87:119]
# date = "8/8/20"
hosp_by_county <-hosp_by_county %>%
strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
hosp_by_county_df <- plyr::ldply(hosp_by_county)
temp1 <- hosp_by_county_df[,1:2]
temp2 <- hosp_by_county_df[,3:4]
temp3 <- hosp_by_county_df[,5:6]
colnames(temp2) <- names(temp1)
colnames(temp3) <- names(temp1)
hosp_by_county <- rbind(temp1, temp2, temp3)
colnames(hosp_by_county) <- c("County", "Hospitalized")
hosp_by_county <-hosp_by_county %>%
mutate(Hospitalized = as.numeric(Hospitalized))
temp1 = sum(hosp_by_county[,2])
hosp_by_county <- rbind(hosp_by_county, c("Totals", temp1))
rm(temp1, temp2, temp3, hosp_by_county_df)
rownames(hosp_by_county) <- hosp_by_county[,1]
# hosp_by_county <- cbind(date = c("2020-08-06", hosp_by_county))
hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
hospital <- hospital[,-1]
#hospital[,1] = mdy(hospital[,1])
h_county <-  t(hosp_by_county[,2])
colnames(h_county) <-  hosp_by_county[,1]
h_county <- cbind(date = c(date, h_county))
rownames(h_county) <- colnames(hospital)
h_county <- t(h_county)
# rownames(h_county) <- as.character(day)
if(mydate1== date){
hospital <- rbind(hospital, h_county)
} else {
temp <-hospital[,1]== date
temp1 <- (1:100)[temp][1]
hospital[temp1,] <- h_county
if(as.character(hospital[nrow(hospital),1]) != mydate1){
hospital <- rbind.fill(hospital, data.frame(Date = Sys.Date()))}
}
write.csv(hospital, "CountyHospitilizations.csv")
hospital <- hospital[!is.na(hospital$Adair),]
mydate <- Sys.Date()
# filename <- "C:\\Users\\mariah.birgen\\Downloads\\Summary.csv"
filename <- "Summary.csv"
CountyData <- read.csv(filename,
stringsAsFactors = FALSE)
CountyData <- as.data.frame(CountyData) %>%
arrange(EventResidentCounty) %>%
mutate(Active = Individuals.Positive - Total.Recovered - Total.Deaths,
positivity = Individuals.Positive/Individuals.Tested,
date = as.Date(mydate),
)
rownames(CountyData) <- CountyData[,1]
temp <-c( EventResidentCounty = "Totals",
colSums(CountyData[,2:6]),
positivity = NA,
date = as.character(mydate))
temp["positivity"] = as.integer(temp["Individuals.Positive"])/as.integer(temp["Individuals.Tested"])
CountyData["Total",] = temp
# CountyData <- rbind(CountyData, Total = temp)
# CountyData <-cbind(date = as.Date(mydate), CountyData)
write.csv(CountyData, file = paste(
'CountyData/',mydate,'CountyData.csv'))
# hospital <- as.data.frame(read.csv("CountyHospitilizations.csv"))
# hospital <- hospital[,-1]
# h_county <-  t(hosp_by_county[,2])
d_county <- t(CountyData[,-1])
county_names <- CountyData[,1]
colnames(d_county) <- CountyData[,1]
# d_county <- as.data.frame(d_county)%>%
#     mutate(Total = Reduce(`+`, .))
d_county <- cbind(date =as.character(mydate),d_county)
Tested <- read.csv( "CountyData/CountyTests.csv", stringsAsFactors=FALSE)
Tested <- Tested[,-1]
Positive <- read.csv( "CountyData/CountyPositive.csv", stringsAsFactors=FALSE)
Positive <- Positive[,-1]
Recovered <- read.csv( "CountyData/CountyRecovered.csv", stringsAsFactors=FALSE)
Recovered <- Recovered[,-1]
Deaths <- read.csv( "CountyData/CountyDeaths.csv", stringsAsFactors=FALSE)
Deaths <- Deaths[,-1]
Active <- read.csv( "CountyData/CountyActive.csv", stringsAsFactors=FALSE)
Active <- Active[,-1]
if( as.character(Tested[nrow(Tested), 1]) != mydate){
Tested <- rbind(Tested, d_county[1,])
Positive <- rbind(Positive, d_county[2,])
Recovered <- rbind(Recovered, d_county[3,])
Deaths <- rbind(Deaths, d_county[4,])
Active <- rbind(Active, d_county[5,])
}
Tested[,-1] = sapply(Tested[,-1], as.integer)
Positive[,-1] = sapply(Positive[,-1], as.integer)
Recovered[,-1] = sapply(Recovered[,-1], as.integer)
Deaths[,-1] = sapply(Deaths[,-1], as.integer)
Active[,-1] = sapply(Active[,-1], as.integer)
# Tested <- Tested[-nrow(Tested),]
# Positive <- Positive[-nrow(Positive),]
# Recovered <- Recovered[-nrow(Recovered),]
# Deaths <- Deaths[-nrow(Deaths),]
trows <- nrow(Tested)
newTest <- Tested[trows,-1]-Tested[trows-1,-1]
newPos <- Positive[trows,-1]-Positive[trows-1,-1]
newRec <- Recovered[trows,-1]-Recovered[trows-1,-1]
newDeath <- Deaths[trows,-1]-Deaths[trows-1,-1]
PerPos7 <- (Positive[trows,-1]-
Positive[trows-7,-1])/
(Tested[trows,-1]-
Tested[trows-7,-1])
NewToday <- rbind(newTest, newPos, newRec, newDeath)
NewToday <- rbind(Active = Positive[trows,-1] -
Recovered[trows,-1] -
Deaths[trows,-1],
NewToday, PerPos = newPos/newTest,
PerPos7 = PerPos7)
colnames(NewToday) <- county_names[1:101]
names_list <- CountyData[,1]
names_list <- names_list[-75]
names_list <- names_list[-100]
per100 <- Tested[,1]
for(i in names_list){
pop[i] <- county[
county$STATE=="Iowa"&county$COUNTY==i,][,3]
tempname <- gsub(" ", "." , i)
tempname = gsub("'",".", tempname)
per100 <- cbind(per100,Active[tempname]/pop[i]*100000)
}
county_names <- colnames(Tested)
county_names <- county_names[-76]
county_names <- gsub(" ", ".", county_names)
for(i in 2:(length(county_names))){
i = county_names[i]
test <- Tested[,i]
temp = length(test)
pos <- as.numeric(Positive[,i])
rec <- as.numeric(Recovered[,i])
hosp <- as.integer(hospital[,i])
hosp = c(rep(NA, length(test)-length(hosp)),hosp)
death <- as.numeric(Deaths[,i])
dates <- as.Date(Tested[,1]    )
temp <- data.frame(
date = dates,
Tested = test,
Positive = pos,
Recovered = rec,
Hospitalized = hosp,
Deaths = death)
temp <- temp %>%
mutate(
Active = Positive - Recovered - Deaths,
New.Pos = Positive - lag(Positive),
New.Test = Tested - lag(Tested),
New.Rec = Recovered - lag(Recovered),
New.Deaths = Deaths - lag(Deaths),
Frac.Pos = New.Pos/New.Test,
Day7.Test = Tested - lag(Tested, n=7),
Day7.Pos = Positive - lag(Positive, n=7),
Day7.Rec = Recovered - lag(Recovered, n=7),
Day7.Death = Deaths - lag(Deaths, n=7),
Day7.Active = Active - lag(Active, n=7),
Day7.Perc = Day7.Pos/Day7.Test,
Day14.Test = Tested - lag(Tested, n=14),
Day14.Pos = Positive - lag(Positive, n=14),
Day14.Rec = Recovered - lag(Recovered, n=14),
Day14.Death = Deaths - lag(Deaths, n=14),
Day14.Active = Active - lag(Active, n=14),
Day14.Perc = Day14.Pos/Day14.Test
)
assign(paste(i,"Data", sep=""), temp)
# write.csv(temp, paste("CountyData/",county_names[i],
# "Data.csv", sep=""))
}
# Adding more data to Bremer
hosp <- as.integer(hospital[,"Bremer"])
temp <- clean %>% select("date","Bremer.Positive",
"Bremer.Recovered", "Bremer.Death")
names(temp) = c("date","Positive", "Recovered", "Deaths")
temp <- subset(temp,
!is.na(Positive) & date < "2020-07-31")%>%
mutate(Tested = NA, Hospitalized = NA)
temp2 <- BremerData %>% select("date","Hospitalized", "Tested","Positive", "Recovered", "Deaths")
temp = rbind(temp, temp2)
rm(temp2)
temp <- temp  %>%
mutate(
Active = Positive - Recovered - Deaths,
New.Pos = Positive - lag(Positive),
New.Test = Tested - lag(Tested),
New.Rec = Recovered - lag(Recovered),
New.Deaths = Deaths - lag(Deaths),
Frac.Pos = New.Pos/New.Test,
Day7.Test = Tested - lag(Tested, n=7),
Day7.Pos = Positive - lag(Positive, n=7),
Day7.Rec = Recovered - lag(Recovered, n=7),
Day7.Death = Deaths - lag(Deaths, n=7),
Day7.Active = Active - lag(Active, n=7),
Day7.Perc = Day7.Pos/Day7.Test,
Day14.Test = Tested - lag(Tested, n=14),
Day14.Pos = Positive - lag(Positive, n=14),
Day14.Rec = Recovered - lag(Recovered, n=14),
Day14.Death = Deaths - lag(Deaths, n=14),
Day14.Active = Active - lag(Active, n=14),
Day14.Perc = Day14.Pos/Day14.Test
)
BremerData = temp
write.csv(BremerData, "CountyData/BremerData.csv")
write.csv(Tested, "CountyData/CountyTests.csv")
write.csv(Positive, "CountyData/CountyPositive.csv")
write.csv(Recovered, "CountyData/CountyRecovered.csv")
write.csv(Deaths, "CountyData/CountyDeaths.csv")
write.csv(Active, "CountyData/CountyActive.csv")
covid19 <- read.csv("covid19.csv", stringsAsFactors = FALSE)
# covid19 <- read_excel("covid19.xlsx", sheet = 1)
county <- read.csv("censusCounties.csv", stringsAsFactors = FALSE)
# covid19 = covid19[-158,]
names(covid19)[names(covid19) == "ï..date"] <- 'date'
# covid19$date <- mdy(covid19$date)
covid19$date <- ymd(covid19$date)
covid19$deaths = sapply(covid19$deaths, as.integer)
covid19 <-covid19 %>% mutate(
negative = Total.Tested - positive,
New.Positive = positive - lag(positive),
New.Negative = negative - lag(negative),
new.hospital = hospitalized - lag(hospitalized),
Total.Daily.Tests = Total.Tested - lag(Total.Tested),
New.Deaths = deaths - lag(deaths),
Still.Sick = positive - Recovered) %>% mutate(
New.Percent.Positive = New.Positive/Total.Daily.Tests,
Week.Positivity.Rate = (positive - lag(positive, n=7))/(Total.Tested - lag(Total.Tested, n=7)),
Percent.Hospitalized = hospitalized/Still.Sick
)
#rownames(covid19) <- covid19[,"date"]
#################################################
##  Fill in county Data in covid19
#################################################
numrows = nrow(BremerData)
numrows1 = nrow(Black.HawkData)
tempBr =   BremerData[numrows,
c("Positive", "Recovered","Deaths", "Active" )]
tempBl =   Black.HawkData[numrows1,
c("Positive", "Recovered","Deaths", "Active" )]
tempBu =   ButlerData[numrows1,
c("Positive", "Recovered","Deaths", "Active" )]
names(tempBr) = c("Bremer.Positive", "Bremer.Recovered",
"Bremer.Death", "Bremer.SS")
names(tempBu) = c("Butler.P", "Butler.R",
"Butler.D", "Butler.SS")
names(tempBl) = c("BlackHawk.P", "BlackHawk.R",
"BlackHawk.D", "BlackHawk.SS")
temp = cbind(tempBr, tempBu, tempBl)
for (i in names(temp)){
covid19[nrow(covid19),i] = temp[i]
}
write.csv(covid19, "covid19.csv",row.names = FALSE)
#################################################
##  Create Clean Dataset
#################################################
clearn <- !is.na(covid19$positive)
clean <- covid19[clearn,]
cdeaths <- covid19[!is.na(covid19$deaths),]
clean <- clean %>% mutate(
negative = Total.Tested - positive,
Percent.Pos = positive/Total.Tested*100,
#np_7day = rollmean(New.Positive, k=7, align = "right", fill = NA),
np_7day = (positive - lag(positive, n=7))/7,
New.Percent.Positive = New.Positive/Total.Daily.Tests,
Percent.Hospitalized = hospitalized/Still.Sick*100
)
clean <- clean %>% mutate(
#  np_7day = rollmean(New.Positive, k=7, align = "right", fill = NA),
#Week.Positivity = rollapply(New.Positive, 7, FUN=sum, fill = NA),
#Week.Tests = rollapply(Total.Daily.Tests, 7, FUN=sum, fill = NA),
Week.Positivity = positive - lag(positive, n=7),
Week.Tests = Total.Tested - lag(Total.Tested, n=7),
Week.Positivity.Rate = Week.Positivity/Week.Tests,
Week.Deaths = deaths - lag(deaths, n=7)
)
clean <- clean %>% mutate(wktot = Week.Positivity)
# clean$wktot <- sapply(clean$date,function(x)sum(clean[difftime(clean$date,x,,"days") %in% 0:-6,]$New.Positive))
lastrow <- nrow(clean)
clean$deaths = sapply(clean$deaths, as.integer)
clean <- clean %>% mutate(
nd_7day = deaths - lag(deaths, n=7), #rollmean(deaths, k=7, fill = NA,),
pp_7day = (positive - lag(positive, n=7))/ (Total.Tested - lag(Total.Tested, n=7))#
#rollmean(New.Percent.Positive, k=7, fill = NA)
)
today <- clean[nrow(clean),]
day <- today$date
new_pos <- today$New.Positive
percent_pos <- round(clean$New.Percent.Positive[nrow(clean)]*100, digits = 1)
# percent_pos <- today$New.Percent.Positive
percent_pos7 <- round(clean$Week.Positivity.Rate[nrow(clean)-4]*100, digits = 1)
percent_hospital <- round(clean$Percent.Hospitalized[nrow(clean)], digits = 1)
# percent_hospital <- clean$Percent.Hospitalized[nrow(clean)]
ICU <- today$ICU
percent_ICU <- round(today$ICU/today$hospitalized*100, digits = 1)
sick <- format(today$Still.Sick, scientific = FALSE, big.mark=",")
IowaPop <- 3155070
#########################################
####### This section downloads the hospitalization data per county. It was added July 25, 2020.
#########################################
#require(pdftools)
#require(tidyverse)
######## The file name is based on the date.
# hosp_by_county <- pdf_text("hosp_by_county.pdf") %>%
#     readr::read_lines() %>%
#     str_squish()
# hosp_by_county <- hosp_by_county[5:37]
# hosp_by_county <-hosp_by_county %>%
#     strsplit("(?= [A-Za-z])(?<=[0-9])|(?= [0-9])(?<=[A-Za-z])", perl=TRUE)
#
# hosp_by_county_df <- plyr::ldply(hosp_by_county)
# temp1 <- hosp_by_county_df[,1:2]
# temp2 <- hosp_by_county_df[,3:4]
# temp3 <- hosp_by_county_df[,5:6]
# colnames(temp2) <- names(temp1)
# colnames(temp3) <- names(temp1)
# hosp_by_county <- rbind(temp1, temp2, temp3)
# colnames(hosp_by_county) <- c("County", "Hospitalized")
# hosp_by_county <-hosp_by_county %>%
#     mutate(Hospitalized = as.numeric(Hospitalized))
# temp1 = sum(hosp_by_county[,2])
# hosp_by_county <- rbind(hosp_by_county, c("Totals", temp1))
# rm(temp1, temp2, temp3, hosp_by_county_df)
#
# rownames(hosp_by_county) <- hosp_by_county[,1]
tail(clean)
pactive <- qplot(date, Still.Sick, data = clean[-(1:23),], geom = c("point", "smooth")) +
ggtitle("Known Active COVID-19 Cases in Iowa")
png(paste(day,"pactive.png"))
pactive
dev.off()
pactive
ppositive <-qplot(date, New.Percent.Positive, data = clean[-(1:7),], geom = c("point", "smooth")) + ylab("Fraction Positive") +
ggtitle("Fraction of Positive COVID-19 Tests in Iowa")
png(paste(day,"ppositive.png"))
ppositive
dev.off()
ppositive
p7positive <-qplot(date, Week.Positivity.Rate, data = clean[-(1:20),], geom = c("point", "smooth")) + ylab("Fraction Positive") +
ggtitle("7 day average of Fraction of Positive COVID-19 Tests in Iowa")
png(paste(day,"p7positive.png"))
p7positive
dev.off()
p7positive
State_Average_Active <- today$Still.Sick/IowaPop*100000
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Black Hawk",][,3]
pBremer <-qplot(date,
# Bremer.SS/Bremer_Population*100000,
Bremer.SS,
data = clean[-(1:71),], geom = c("point", "smooth")) +
ggtitle(
# "Known Active COVID-19 Cases in Bremer County Per 100,000 People")
"Known Active COVID-19 Cases in Bremer County")
# +  geom_hline(aes(yintercept=State_Average_Active)
pButler <-qplot(date,
#Butler.SS/Butler_Population*100000,
Butler.SS,
data = clean[-(1:116),], geom = c("point", "smooth")) +
ggtitle("Known Active COVID-19 Cases in Butler County")
#ggtitle("Known Active COVID-19 Cases in Butler County Per 100,000 People")
#+  geom_hline(aes(yintercept=State_Average_Active)
png(paste(day,"pButler.png"))
pButler
dev.off()
pButler
pBlackHawk <-qplot(date,
BlackHawk.SS,
#BlackHawk.SS/BlackHawk_Population*100000,
data = clean[-(1:116),], geom = c("point", "smooth")) +
ggtitle("Known Active COVID-19 Cases in Black Hawk County")
#ggtitle("Known Active COVID-19 Cases in Black Hawk County Per 100,000 People")
#+  geom_hline(aes(yintercept=State_Average_Active)
png(paste(day,"pBlackHawk.png"))
pBlackHawk
dev.off()
pBlackHawk
png(paste(day,"pBremer.png"))
pBremer
dev.off()
pBremer
day7pos.Bremer <- round(
BremerData[nrow(BremerData), ncol(BremerData)]*100, digits=1)
clean <- clean[-c(1,10),]
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
clean$P2 <- as.numeric(clean$positive)^2
quadratic <-lm(New.Positive ~ positive + P2-1, data = clean)
r <- quadratic$coefficients[2]*(-1)
M <- quadratic$coefficients[1]/r
Mprint <- format(M, scientific = FALSE)
predictedcounts <- with(clean,predict(quadratic,list(positive = positive, P2 = P2)))
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
with(clean,lines(positive, predictedcounts, col = "darkgreen", lwd = 3))
IowaPercent <- round(M/IowaPop*100, digits = 2)
logisticGrowthy <- function(data, M){
data$binomial <- data$positive/M
mylogit <- glm(binomial ~ date, data = data, family = "binomial")
ypredict <- predict(mylogit, list(date = data$date), type = "response")*M
}
clean$binomial <- clean$positive/M
mylogit <- glm(binomial ~ date, data = clean, family = "binomial")
require(knitr)
lastrow <- BremerData[nrow(BremerData),]
AC = as.integer(lastrow["Active"])
H = as.integer(lastrow["Hospitalized"])
NP = as.integer(lastrow["New.Pos"])
PR = as.numeric(round(lastrow["Frac.Pos"]*100, digits = 2))
ND = as.integer(lastrow["New.Deaths"])
T = as.integer(lastrow["New.Test"])
require(reshape2)
mydate <- Sys.Date()
Bremer_Population <- county[county$COUNTY=="Bremer",][,3]
Butler_Population <- county[county$STATE=="Iowa"&county$COUNTY=="Butler",][,3]
BlackHawk_Population <- county[
county$STATE=="Iowa"&county$COUNTY=="Black Hawk",
][,3]
temp = clean[,c("date","Bremer.SS", "Butler.SS", "BlackHawk.SS")]
temp = temp %>% mutate(Bremer = Bremer.SS/Bremer_Population*100000,
Butler = Butler.SS/Butler_Population* 100000,
BlackHawk = BlackHawk.SS/BlackHawk_Population * 100000)
temp = temp[-(1:71),]
mtemp = melt(temp, id.vars = "date",
measure.vars = c('Bremer', 'Butler', 'BlackHawk'))
printplot <- qplot(date, value, color = variable, data = mtemp, geom = c("point", "smooth")) +
ylab("Cases per 100,000") +
labs(color = "County", title = paste("Active Cases Per 100,000", mydate))
print(printplot)
png("BBBCounties.png")
printplot
dev.off()
# colnames(BremerData) = CountyDataLongNames
lastrow <- BremerData[nrow(BremerData),]
kable(t(lastrow[-1]), digits = 2)
kable(BremerData[,1:7])
