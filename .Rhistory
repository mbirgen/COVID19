LateDeathDoubling = death_doubling_time2,
NewPositiveDoubling = np_doubling_time,
LogisticR = r,
LogisticM = M,
FourteenDayPrediction = predict14
)
if(predictions[nrow(predictions),1]!= day){
predictions = rbind(predictions, list)
}
write.csv(predictions, "Predictions.csv")
qplot(date, positive, data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
qplot(date, deaths, data =cdeaths, rm.na=TRUE) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(deaths~date, data=cdeaths)
#model$coefficients
predictions
suppressPackageStartupMessages( require(dplyr))
suppressPackageStartupMessages( require(lubridate))
suppressPackageStartupMessages( require(ggplot2))
suppressPackageStartupMessages( require(zoo))
covid19 <- read.csv("covid19.csv", stringsAsFactors = FALSE)
covid19$date <- mdy(covid19$date)
clearn <- !is.na(covid19$positive)
clean <- covid19[clearn,]
cdeaths <- covid19[!is.na(covid19$deaths),]
lastrow <- nrow(clean)
clean <- clean %>% mutate(
#New.Positive[lastrow] = positive[lastrow] - positive[lastrow-1])
negative = Total.Tested - positive,
Percent.Pos = positive/Total.Tested*100,
np_7day = rollmean(New.Positive, k=7, fill = NA)
)
today <- cdeaths[nrow(cdeaths),]
day <- today$date
new_pos <- today$New.Positive
percent_pos <- today$New.Percent.Positive
percent_hospital <- today$Percent.Hospitalized
sick <- today$Still.Sick
IowaPop <- 3.155*10^6
tail(clean)
qplot(date, log(positive), data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model0 <- lm(log(positive)~date, data=clean)
#model0$coefficients[2]
positive_doubling_time <- log(2)/model0$coefficients[2]
#positive_doubling_time
x = as.numeric(clean$date)
y = exp(model0$coefficients[1]+ model0$coefficients[2] *x)
A = data.frame(date = clean$date, positive = clean$positive, y = y)
ggplot(A, aes(date, y = value, color = variable)) +
geom_point(aes(y = positive, col = "positive")) +     geom_line(aes(y = y, col = "model"))
latedata <- clean[-(1:10),]
model4 <- lm(log(positive)~date, data=latedata)
positive_doubling_time2 <- log(2)/model4$coefficients[2]
qplot(date, log(positive), data =latedata) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "purple")
x = as.numeric(latedata$date)
y = exp(model4$coefficients[1]+ model4$coefficients[2] *x)
A = data.frame(date = latedata$date, positive = latedata$positive, y = y)
ggplot(A, aes(date, y = value, color = variable)) +
geom_point(aes(y = positive, col = "positive")) +     geom_line(aes(y = y, col = "model"))
zerodeaths <- cdeaths$deaths == 0
cdeaths <- cdeaths[!zerodeaths,]
qplot(date, log(deaths), data =cdeaths) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(log(deaths)~date, data=cdeaths)
#model$coefficients[2]
death_doubling_time <- log(2)/model$coefficients[2]
#death_doubling_time
latedata2 <- latedata[-(1:8),]
qplot(date, log(deaths), data =latedata2) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model5 <- lm(log(deaths)~date, data=latedata2)
#model$coefficients[2]
death_doubling_time2 <- log(2)/model5$coefficients[2]
#death_doubling_time
x = as.numeric(latedata2$date)
y = exp(model5$coefficients[1]+ model5$coefficients[2] *x)
B = data.frame(date = latedata2$date, deaths = latedata2$deaths, y = y)
ggplot(B, aes(date, y = value, color = variable)) +
geom_point(aes(y = deaths, col = "deaths")) +     geom_line(aes(y = y, col = "model"))
clean <- clean[-c(1,10),]
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
clean$P2 <- as.numeric(clean$positive)^2
quadratic <-lm(New.Positive ~ positive + P2-1, data = clean)
r <- quadratic$coefficients[2]*(-1)
M <- quadratic$coefficients[1]/r
Mprint <- format(M, scientific = FALSE)
predictedcounts <- with(clean,predict(quadratic,list(positive = positive, P2 = P2)))
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
with(clean,lines(positive, predictedcounts, col = "darkgreen", lwd = 3))
IowaPercent <- M/IowaPop
clean$binomial <- clean$positive/M
mylogit <- glm(binomial ~ date, data = clean, family = "binomial")
#ggplot(clean, aes(x=date, y=binomial)) +
# geom_point() +
#stat_smooth(method="glm", method.args=list(family="binomial"))
ypredict <- predict(mylogit, list(date = clean$date), type = "response")*M
qplot(date, positive, data = clean) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = ypredict, col = "model"), size = 1.25)
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 14),by = 1)
#play <- clean %>% filter(row_number() >= (n() - 7))
play <- clean
ypredict2 <- predict(mylogit, list(date =ndate), type = "response")*M
df <- data.frame(date = ndate, model = ypredict2)
df <- merge(df, play, all = TRUE)
predict14 <- format(round(ypredict2[length(ypredict2)], digits = 0), scientific = FALSE)
qplot(date, model, ylab = "Positive Cases", data = df, geom = "smooth") +
#geom_line(size = 1.25, color = "red") +
geom_point(aes(y=positive), shape = 8) + theme(legend.position = 'right')
model4 <- lm(log(New.Positive) ~ date, data = clean)
pred <- predict(model4, newdata = data.frame(date =clean$date))
np_doubling_time <- log(2)/model4$coefficients[2]
qplot(date, New.Positive, data = clean, geom = c("point", "smooth")) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = exp(pred), col = "model")) +
geom_line(aes(y=np_7day, col = "7 day average"), size = 1.25)
list <- data.frame(date = day,
PositiveDoubling = positive_doubling_time,
latePositiveDoubling = positive_doubling_time2,
DeathDoubling = death_doubling_time,
LateDeathDoubling = death_doubling_time2,
NewPositiveDoubling = np_doubling_time,
LogisticR = r,
LogisticM = M,
FourteenDayPrediction = predict14
)
if(predictions[nrow(predictions),1]!= day){
predictions = rbind(predictions, list)
}
write.csv(predictions, "Predictions.csv")
qplot(date, positive, data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
qplot(date, deaths, data =cdeaths, rm.na=TRUE) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(deaths~date, data=cdeaths)
#model$coefficients
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 14),by = 1)
ypredict3 <- predict(mylogit, list(date =ndate), type = "response")*M
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 28),by = 1)
ypredict3 <- predict(mylogit, list(date =ndate), type = "response")*M
df2 <- data.frame(date = ndate, model = ypredict3)
df2 <- merge(df, play, all = TRUE)
qplot(date, model, ylab = "Positive Cases", data = df2, geom = "smooth") +
#geom_line(size = 1.25, color = "red") +
geom_point(aes(y=positive), shape = 8) + theme(legend.position = 'right')
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 28),by = 1)
ypredict3 <- predict(mylogit, list(date =ndate), type = "response")*M
df2 <- data.frame(date = ndate, model = ypredict3)
df2 <- merge(df, play, all = TRUE)
qplot(date, model, ylab = "Positive Cases", data = df2, geom = "smooth") +
#geom_line(size = 1.25, color = "red") +
geom_point(aes(y=positive), shape = 8) + theme(legend.position = 'right')
df2 <- data.frame(date = ndate, model = ypredict3)
df2 <- merge(df2, play, all = TRUE)
qplot(date, model, ylab = "Positive Cases", data = df2, geom = "smooth") +
#geom_line(size = 1.25, color = "red") +
geom_point(aes(y=positive), shape = 8) + theme(legend.position = 'right')
percent_ICU <- today$ICU/today$hospitalized
suppressPackageStartupMessages( require(dplyr))
suppressPackageStartupMessages( require(lubridate))
suppressPackageStartupMessages( require(ggplot2))
suppressPackageStartupMessages( require(zoo))
covid19 <- read.csv("covid19.csv", stringsAsFactors = FALSE)
covid19$date <- mdy(covid19$date)
clearn <- !is.na(covid19$positive)
clean <- covid19[clearn,]
cdeaths <- covid19[!is.na(covid19$deaths),]
lastrow <- nrow(clean)
clean <- clean %>% mutate(
#New.Positive[lastrow] = positive[lastrow] - positive[lastrow-1])
negative = Total.Tested - positive,
Percent.Pos = positive/Total.Tested*100,
np_7day = rollmean(New.Positive, k=7, fill = NA)
)
today <- cdeaths[nrow(cdeaths),]
day <- today$date
new_pos <- today$New.Positive
percent_pos <- today$New.Percent.Positive
percent_hospital <- today$Percent.Hospitalized
percent_ICU <- today$ICU/today$hospitalized
sick <- today$Still.Sick
IowaPop <- 3.155*10^6
tail(clean)
qplot(date, log(positive), data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model0 <- lm(log(positive)~date, data=clean)
#model0$coefficients[2]
positive_doubling_time <- log(2)/model0$coefficients[2]
#positive_doubling_time
x = as.numeric(clean$date)
y = exp(model0$coefficients[1]+ model0$coefficients[2] *x)
A = data.frame(date = clean$date, positive = clean$positive, y = y)
ggplot(A, aes(date, y = value, color = variable)) +
geom_point(aes(y = positive, col = "positive")) +     geom_line(aes(y = y, col = "model"))
latedata <- clean[-(1:10),]
model4 <- lm(log(positive)~date, data=latedata)
positive_doubling_time2 <- log(2)/model4$coefficients[2]
qplot(date, log(positive), data =latedata) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "purple")
x = as.numeric(latedata$date)
y = exp(model4$coefficients[1]+ model4$coefficients[2] *x)
A = data.frame(date = latedata$date, positive = latedata$positive, y = y)
ggplot(A, aes(date, y = value, color = variable)) +
geom_point(aes(y = positive, col = "positive")) +     geom_line(aes(y = y, col = "model"))
zerodeaths <- cdeaths$deaths == 0
cdeaths <- cdeaths[!zerodeaths,]
qplot(date, log(deaths), data =cdeaths) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(log(deaths)~date, data=cdeaths)
#model$coefficients[2]
death_doubling_time <- log(2)/model$coefficients[2]
#death_doubling_time
latedata2 <- latedata[-(1:8),]
qplot(date, log(deaths), data =latedata2) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model5 <- lm(log(deaths)~date, data=latedata2)
#model$coefficients[2]
death_doubling_time2 <- log(2)/model5$coefficients[2]
#death_doubling_time
x = as.numeric(latedata2$date)
y = exp(model5$coefficients[1]+ model5$coefficients[2] *x)
B = data.frame(date = latedata2$date, deaths = latedata2$deaths, y = y)
ggplot(B, aes(date, y = value, color = variable)) +
geom_point(aes(y = deaths, col = "deaths")) +     geom_line(aes(y = y, col = "model"))
clean <- clean[-c(1,10),]
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
clean$P2 <- as.numeric(clean$positive)^2
quadratic <-lm(New.Positive ~ positive + P2-1, data = clean)
r <- quadratic$coefficients[2]*(-1)
M <- quadratic$coefficients[1]/r
Mprint <- format(M, scientific = FALSE)
predictedcounts <- with(clean,predict(quadratic,list(positive = positive, P2 = P2)))
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
with(clean,lines(positive, predictedcounts, col = "darkgreen", lwd = 3))
IowaPercent <- M/IowaPop*100
clean$binomial <- clean$positive/M
mylogit <- glm(binomial ~ date, data = clean, family = "binomial")
#ggplot(clean, aes(x=date, y=binomial)) +
# geom_point() +
#stat_smooth(method="glm", method.args=list(family="binomial"))
ypredict <- predict(mylogit, list(date = clean$date), type = "response")*M
qplot(date, positive, data = clean) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = ypredict, col = "model"), size = 1.25)
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 14),by = 1)
#play <- clean %>% filter(row_number() >= (n() - 7))
play <- clean
ypredict2 <- predict(mylogit, list(date =ndate), type = "response")*M
df <- data.frame(date = ndate, model = ypredict2)
df <- merge(df, play, all = TRUE)
predict14 <- format(round(ypredict2[length(ypredict2)], digits = 0), scientific = FALSE)
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 28),by = 1)
ypredict3 <- predict(mylogit, list(date =ndate), type = "response")*M
df2 <- data.frame(date = ndate, model = ypredict3)
df2 <- merge(df2, play, all = TRUE)
qplot(date, model, ylab = "Positive Cases", data = df2, geom = "smooth") +
#geom_line(size = 1.25, color = "red") +
geom_point(aes(y=positive), shape = 8) + theme(legend.position = 'right')
model4 <- lm(log(New.Positive) ~ date, data = clean)
pred <- predict(model4, newdata = data.frame(date =clean$date))
np_doubling_time <- log(2)/model4$coefficients[2]
qplot(date, New.Positive, data = clean, geom = c("point", "smooth")) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = exp(pred), col = "model")) +
geom_line(aes(y=np_7day, col = "7 day average"), size = 1.25)
list <- data.frame(date = day,
PositiveDoubling = positive_doubling_time,
latePositiveDoubling = positive_doubling_time2,
DeathDoubling = death_doubling_time,
LateDeathDoubling = death_doubling_time2,
NewPositiveDoubling = np_doubling_time,
LogisticR = r,
LogisticM = M,
FourteenDayPrediction = predict14
)
if(predictions[nrow(predictions),1]!= day){
predictions = rbind(predictions, list)
}
write.csv(predictions, "Predictions.csv")
qplot(date, positive, data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
qplot(date, deaths, data =cdeaths, rm.na=TRUE) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(deaths~date, data=cdeaths)
#model$coefficients
IowaPercent <- round(M/IowaPop*100, digits = 2)
percent_ICU <- round(today$ICU/today$hospitalized*100, digits = 1)
suppressPackageStartupMessages( require(dplyr))
suppressPackageStartupMessages( require(lubridate))
suppressPackageStartupMessages( require(ggplot2))
suppressPackageStartupMessages( require(zoo))
suppressPackageStartupMessages( require(gsheet))
covid19 <- read.csv("covid19.csv", stringsAsFactors = FALSE)
gcovid19 <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1uUqiWvvZvXtYBeQ1IASfwHEP45q03y9Pk8vjYTMAxO8")
# covid19 <- gcovid19
names(covid19)[names(covid19) == "ï..date"] <- 'date'
covid19$date <- mdy(covid19$date)
clearn <- !is.na(covid19$positive)
clean <- covid19[clearn,]
calculate <- with(data = clean,data.frame(
New.Positive = diff(positive),
New.Negative = diff(negative),
Total.Daily.Tests = diff(Total.Tested),
New.Deaths = diff(deaths)
))
calculate <- rbind(c(NA,NA,NA,NA), calculate)
calculate <- cbind(date = clean$date, calculate)
cdeaths <- covid19[!is.na(covid19$deaths),]
clean <- clean %>% mutate(
negative = Total.Tested - positive,
Percent.Pos = positive/Total.Tested*100,
np_7day = rollmean(New.Positive, k=7, fill = NA),
New.Positive = calculate$New.Positive,
New.Negative = calculate$New.Negative,
Total.Daily.Tests = calculate$Total.Daily.Tests,
New.Deaths = calculate$New.Deaths,
New.Percent.Positive = New.Positive/Total.Daily.Tests
)
lastrow <- nrow(clean)
clean <- clean %>% mutate(
nd_7day = rollmean(deaths, k=7, fill = NA,),
pp_7day = rollmean(New.Percent.Positive, k=7, fill = NA))
today <- clean[nrow(clean),]
day <- today$date
new_pos <- today$New.Positive
percent_pos <- round(today$New.Percent.Positive*100, digits = 1)
percent_hospital <- today$Percent.Hospitalized
percent_ICU <- round(today$ICU/today$hospitalized*100, digits = 1)
sick <- today$Still.Sick
IowaPop <- 3.155*10^6
tail(clean)
qplot(date, Still.Sick, data = clean) +
ggtitle("Known Active COVID-19 Cases in Iowa")
clean <- clean[-c(1,10),]
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
clean$P2 <- as.numeric(clean$positive)^2
quadratic <-lm(New.Positive ~ positive + P2-1, data = clean)
r <- quadratic$coefficients[2]*(-1)
M <- quadratic$coefficients[1]/r
Mprint <- format(M, scientific = FALSE)
predictedcounts <- with(clean,predict(quadratic,list(positive = positive, P2 = P2)))
with(clean, plot(positive, New.Positive, pch=16, xlab = "Positive Counts", ylab = "Rate of Change of Positive", cex.lab = 1.3, col = "blue"))
with(clean,lines(positive, predictedcounts, col = "darkgreen", lwd = 3))
IowaPercent <- round(M/IowaPop*100, digits = 2)
logisticGrowthy <- function(data, M){
data$binomial <- data$positive/M
mylogit <- glm(binomial ~ date, data = data, family = "binomial")
ypredict <- predict(mylogit, list(date = data$date), type = "response")*M
}
clean$binomial <- clean$positive/M
mylogit <- glm(binomial ~ date, data = clean, family = "binomial")
ypredict <- predict(mylogit, list(date = clean$date), type = "response")*M
#ypredict <- logisticGrowthy(clean, M)
qplot(date, positive, data = clean) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = ypredict, col = "model"), size = 1.25)
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 14),by = 1)
#play <- clean %>% filter(row_number() >= (n() - 7))
play <- clean
ypredict2 <- predict(mylogit, list(date =ndate), type = "response")*M
df <- data.frame(date = ndate, model = ypredict2)
df <- merge(df, play, all = TRUE)
predict14 <- format(round(ypredict2[length(ypredict2)], digits = 0), scientific = FALSE)
ndate <-seq(as.Date("2020-03-09"),as.Date(day + 28),by = 1)
ypredict3 <- predict(mylogit, list(date =ndate), type = "response")*M
df2 <- data.frame(date = ndate, model = ypredict3)
df2 <- merge(df2, play, all = TRUE)
qplot(date, model, ylab = "Positive Cases", data = df2, geom = "smooth") +
#geom_line(size = 1.25, color = "red") +
geom_point(aes(y=positive), shape = 8) + theme(legend.position = 'right')
SIR <- with(clean, data.frame(
dS = (-1)*diff(positive),
dR = diff(Recovered),
dI = diff(Still.Sick),
dD = diff(deaths)
))
SIR <- SIR %>% mutate(
R = clean$Recovered[-1],
I = clean$Still.Sick[-1],
day = clean$date[-1],
S = M - clean$positive[-1]
)
SIR$day = as.POSIXct(SIR$day)
SIR <- SIR[complete.cases(SIR),]
qplot(day, data = SIR) +
stat_smooth(aes( y = S),method = "loess") +
stat_smooth( aes( y = I), color = "red", method = "loess") +
stat_smooth( aes( y = R), color = "green", method = "loess") +
theme(legend.position = "right")
dRmodel <- lm(dR ~ 0+I, data = SIR)
r2 <- dRmodel$coefficients[1]
dImodel <- lm (dS ~ 0 + S*I, data = SIR)
r1 <- dImodel$coefficients[1]
require(deSolve)
state <- c(S = as.numeric(1-clean$positive[25]/M),
I = as.numeric(clean$Still.Sick[25]/M),
R = as.numeric(clean$Recovered[25]/M))
times <- seq(0, nrow(clean)-24, by = 1)
parameters <- c(r1=as.numeric(r1*M),
r2=as.numeric(r2))
# R function to calculate the value of the derivatives at each time value
# Use the names of the variables as defined in the vectors above
SIR <- function(time, state, parameters){
with(as.list(c(state, parameters)), {
dS = r1*S*I
dR = r2*I
dI = -r1*S*I -r2*I
return(list(c(dS, dI, dR)))
})
}
## Integration with 'ode'
out <- ode(y = state, times = times, func = SIR, parms = parameters, method = rk4)
## Ploting
out.df = as.data.frame(out) # required by ggplot: data object must be a data frame
require(reshape2)
out.m = melt(out.df, id.vars='time') # this makes plotting easier by puting all variables in a single column
p <- ggplot(out.m, aes(time, value, color = variable)) + geom_point()
#print(p)
qplot(date, log(positive), data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model0 <- lm(log(positive)~date, data=clean)
#model0$coefficients[2]
positive_doubling_time <- log(2)/model0$coefficients[2]
#positive_doubling_time
x = as.numeric(clean$date)
y = exp(model0$coefficients[1]+ model0$coefficients[2] *x)
A = data.frame(date = clean$date, positive = clean$positive, y = y)
ggplot(A, aes(date, y = value, color = variable)) +
geom_point(aes(y = positive, col = "positive")) +     geom_line(aes(y = y, col = "model"))
latedata <- clean[-(1:10),]
model4 <- lm(log(positive)~date, data=latedata)
positive_doubling_time2 <- log(2)/model4$coefficients[2]
qplot(date, log(positive), data =latedata) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "purple")
x = as.numeric(latedata$date)
y = exp(model4$coefficients[1]+ model4$coefficients[2] *x)
A = data.frame(date = latedata$date, positive = latedata$positive, y = y)
ggplot(A, aes(date, y = value, color = variable)) +
geom_point(aes(y = positive, col = "positive")) +     geom_line(aes(y = y, col = "model"))
zerodeaths <- cdeaths$deaths == 0
cdeaths <- cdeaths[!zerodeaths,]
qplot(date, log(deaths), data =cdeaths) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(log(deaths)~date, data=cdeaths)
#model$coefficients[2]
death_doubling_time <- log(2)/model$coefficients[2]
#death_doubling_time
latedata2 <- latedata[-(1:8),]
qplot(date, log(deaths), data =latedata2) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model5 <- lm(log(deaths)~date, data=latedata2)
#model$coefficients[2]
death_doubling_time2 <- log(2)/model5$coefficients[2]
#death_doubling_time
x = as.numeric(latedata2$date)
y = exp(model5$coefficients[1]+ model5$coefficients[2] *x)
B = data.frame(date = latedata2$date, deaths = latedata2$deaths, y = y)
ggplot(B, aes(date, y = value, color = variable)) +
geom_point(aes(y = deaths, col = "deaths")) +     geom_line(aes(y = y, col = "model"))
npPredict <- diff(ypredict2,1,1)
templength <- length(clean$New.Positive)
npPredict <- npPredict[1:templength]
qplot(date, New.Positive, data = clean, geom = c("point", "smooth")) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = npPredict, col = "model")) +
geom_line(aes(y=np_7day, col = "7 day average"), size = 1.25)
temp <- 1/(.997*.95 - (1-.995)*(1-.95))
accuracy <- clean %>%
mutate(
tp = .95*positive/temp,
fp = (1-.993)/temp*positive,
tn = 0.993/temp*negative,
fn = (1-.95)/temp*negative) %>%
mutate( pos = round(tp+fn, digits = 0),
neg = round(tn+fp, digits = 0))
lastrow = length(accuracy)
predictions <- as.data.frame(read.csv("Predictions.csv"))
predictions <- predictions[,-1]
predictions$date <- as.Date(predictions$date)
list <- data.frame(date = day,
PositiveDoubling = positive_doubling_time,
latePositiveDoubling = positive_doubling_time2,
DeathDoubling = death_doubling_time,
LateDeathDoubling = death_doubling_time2,
NewPositiveDoubling = np_doubling_time,
LogisticR = r,
LogisticM = M,
FourteenDayPrediction = predict14
)
list$date <- as.Date(list$date)
rownames(list) <- c()
if(as.character(predictions[nrow(predictions),1])!= day){
predictions = rbind(predictions, list)
}
write.csv(predictions, "Predictions.csv")
write.csv(clean, "CleanData.csv")
qplot(date, positive, data =clean) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
qplot(date, deaths, data =cdeaths, rm.na=TRUE) + geom_point() + geom_smooth()+
stat_smooth(method = "lm", col = "red")
model <- lm(deaths~date, data=cdeaths)
#model$coefficients
model4 <- lm(log(New.Positive) ~ date, data = clean)
pred <- predict(model4, newdata = data.frame(date =clean$date))
np_doubling_time <- log(2)/model4$coefficients[2]
qplot(date, New.Positive, data = clean, geom = c("point", "smooth")) +
#stat_smooth(method = "lm", col = "green") +
geom_line(aes(y = exp(pred), col = "model")) +
geom_line(aes(y=np_7day, col = "7 day average"), size = 1.25)
